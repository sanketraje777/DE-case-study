[2025-06-06T10:10:01.281+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-06-06T10:10:01.548+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: etl_ods.tg_salesorderitem.tg_postprocess_salesorderitem.add_constraints_salesorderitem manual__2025-06-06T10:09:16.601242+00:00 [queued]>
[2025-06-06T10:10:01.569+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: etl_ods.tg_salesorderitem.tg_postprocess_salesorderitem.add_constraints_salesorderitem manual__2025-06-06T10:09:16.601242+00:00 [queued]>
[2025-06-06T10:10:01.571+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 1
[2025-06-06T10:10:01.603+0000] {taskinstance.py:2330} INFO - Executing <Task(_PythonDecoratedOperator): tg_salesorderitem.tg_postprocess_salesorderitem.add_constraints_salesorderitem> on 2025-06-06 10:09:16.601242+00:00
[2025-06-06T10:10:01.622+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.12/site-packages/airflow/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=535) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-06-06T10:10:01.624+0000] {standard_task_runner.py:63} INFO - Started process 540 to run task
[2025-06-06T10:10:01.622+0000] {standard_task_runner.py:90} INFO - Running: ['airflow', 'tasks', 'run', 'etl_ods', 'tg_salesorderitem.tg_postprocess_salesorderitem.add_constraints_salesorderitem', 'manual__2025-06-06T10:09:16.601242+00:00', '--job-id', '66', '--raw', '--subdir', 'DAGS_FOLDER/etl_ods/dag.py', '--cfg-path', '/tmp/tmp5oq_xwl9']
[2025-06-06T10:10:01.627+0000] {standard_task_runner.py:91} INFO - Job 66: Subtask tg_salesorderitem.tg_postprocess_salesorderitem.add_constraints_salesorderitem
[2025-06-06T10:10:01.719+0000] {task_command.py:426} INFO - Running <TaskInstance: etl_ods.tg_salesorderitem.tg_postprocess_salesorderitem.add_constraints_salesorderitem manual__2025-06-06T10:09:16.601242+00:00 [running]> on host b168fc67a480
[2025-06-06T10:10:01.911+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='etl_ods' AIRFLOW_CTX_TASK_ID='tg_salesorderitem.tg_postprocess_salesorderitem.add_constraints_salesorderitem' AIRFLOW_CTX_EXECUTION_DATE='2025-06-06T10:09:16.601242+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-06-06T10:09:16.601242+00:00'
[2025-06-06T10:10:01.914+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-06-06T10:10:01.919+0000] {tasks.py:214} INFO - Loading SQL from file: /opt/airflow/sql/postgres_data_warehouse/ods/salesorderitem/ods_create_salesorderitem_constraints_indexes.sql
[2025-06-06T10:10:01.951+0000] {tasks.py:221} INFO - processed query: ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_pkey PRIMARY KEY (item_id);
ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_order_id_fkey FOREIGN KEY (order_id) REFERENCES ods.salesorder(id) 
        ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_product_id_fkey FOREIGN KEY (product_id) REFERENCES ods.product(product_id) 
        ON DELETE CASCADE ON UPDATE CASCADE;
CREATE INDEX IF NOT EXISTS 
    idx_salesorderitem_order_id ON ods.salesorderitem(order_id);
CREATE INDEX IF NOT EXISTS 
    idx_salesorderitem_product_id ON ods.salesorderitem(product_id);
CREATE INDEX IF NOT EXISTS
    idx_salesorderitem_item_id_order_id_modified_at ON ods.salesorderitem(item_id, order_id, modified_at DESC);, parameters: {'target_schema': 'ods', 'target_table': 'salesorderitem'}
[2025-06-06T10:10:01.970+0000] {tasks.py:229} INFO - Split into 6 individual SQL statements
[2025-06-06T10:10:01.971+0000] {tasks.py:233} INFO - Executing:
ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_pkey PRIMARY KEY (item_id);
 with parameters: {'target_schema': 'ods', 'target_table': 'salesorderitem'}
[2025-06-06T10:10:01.985+0000] {base.py:84} INFO - Using connection ID 'postgres_default' for task execution.
[2025-06-06T10:10:01.992+0000] {sql.py:470} INFO - Running statement: ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_pkey PRIMARY KEY (item_id);, parameters: None
[2025-06-06T10:10:02.005+0000] {tasks.py:233} INFO - Executing:
ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_order_id_fkey FOREIGN KEY (order_id) REFERENCES ods.salesorder(id) 
        ON DELETE CASCADE ON UPDATE CASCADE;
 with parameters: {'target_schema': 'ods', 'target_table': 'salesorderitem'}
[2025-06-06T10:10:02.014+0000] {base.py:84} INFO - Using connection ID 'postgres_default' for task execution.
[2025-06-06T10:10:02.020+0000] {sql.py:470} INFO - Running statement: ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_order_id_fkey FOREIGN KEY (order_id) REFERENCES ods.salesorder(id) 
        ON DELETE CASCADE ON UPDATE CASCADE;, parameters: None
[2025-06-06T10:10:02.029+0000] {tasks.py:233} INFO - Executing:
ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_product_id_fkey FOREIGN KEY (product_id) REFERENCES ods.product(product_id) 
        ON DELETE CASCADE ON UPDATE CASCADE;
 with parameters: {'target_schema': 'ods', 'target_table': 'salesorderitem'}
[2025-06-06T10:10:02.040+0000] {base.py:84} INFO - Using connection ID 'postgres_default' for task execution.
[2025-06-06T10:10:02.047+0000] {sql.py:470} INFO - Running statement: ALTER TABLE ods.salesorderitem 
    ADD CONSTRAINT salesorderitem_product_id_fkey FOREIGN KEY (product_id) REFERENCES ods.product(product_id) 
        ON DELETE CASCADE ON UPDATE CASCADE;, parameters: None
[2025-06-06T10:10:02.056+0000] {tasks.py:233} INFO - Executing:
CREATE INDEX IF NOT EXISTS 
    idx_salesorderitem_order_id ON ods.salesorderitem(order_id);
 with parameters: {'target_schema': 'ods', 'target_table': 'salesorderitem'}
[2025-06-06T10:10:02.065+0000] {base.py:84} INFO - Using connection ID 'postgres_default' for task execution.
[2025-06-06T10:10:02.071+0000] {sql.py:470} INFO - Running statement: CREATE INDEX IF NOT EXISTS 
    idx_salesorderitem_order_id ON ods.salesorderitem(order_id);, parameters: None
[2025-06-06T10:10:02.091+0000] {tasks.py:233} INFO - Executing:
CREATE INDEX IF NOT EXISTS 
    idx_salesorderitem_product_id ON ods.salesorderitem(product_id);
 with parameters: {'target_schema': 'ods', 'target_table': 'salesorderitem'}
[2025-06-06T10:10:02.100+0000] {base.py:84} INFO - Using connection ID 'postgres_default' for task execution.
[2025-06-06T10:10:02.107+0000] {sql.py:470} INFO - Running statement: CREATE INDEX IF NOT EXISTS 
    idx_salesorderitem_product_id ON ods.salesorderitem(product_id);, parameters: None
[2025-06-06T10:10:02.130+0000] {tasks.py:233} INFO - Executing:
CREATE INDEX IF NOT EXISTS
    idx_salesorderitem_item_id_order_id_modified_at ON ods.salesorderitem(item_id, order_id, modified_at DESC);
 with parameters: {'target_schema': 'ods', 'target_table': 'salesorderitem'}
[2025-06-06T10:10:02.141+0000] {base.py:84} INFO - Using connection ID 'postgres_default' for task execution.
[2025-06-06T10:10:02.147+0000] {sql.py:470} INFO - Running statement: CREATE INDEX IF NOT EXISTS
    idx_salesorderitem_item_id_order_id_modified_at ON ods.salesorderitem(item_id, order_id, modified_at DESC);, parameters: None
[2025-06-06T10:10:02.165+0000] {python.py:237} INFO - Done. Returned value was: [None, None, None, None, None, None]
[2025-06-06T10:10:02.166+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-06-06T10:10:02.193+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=etl_ods, task_id=tg_salesorderitem.tg_postprocess_salesorderitem.add_constraints_salesorderitem, run_id=manual__2025-06-06T10:09:16.601242+00:00, execution_date=20250606T100916, start_date=20250606T101001, end_date=20250606T101002
[2025-06-06T10:10:02.242+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-06-06T10:10:02.280+0000] {taskinstance.py:3498} INFO - 1 downstream tasks scheduled from follow-on schedule check
[2025-06-06T10:10:02.284+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
