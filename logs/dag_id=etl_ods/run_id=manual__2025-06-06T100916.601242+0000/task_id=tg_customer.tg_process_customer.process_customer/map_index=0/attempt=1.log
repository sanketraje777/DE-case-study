[2025-06-06T10:09:45.555+0000] {local_task_job_runner.py:120} INFO - ::group::Pre task execution logs
[2025-06-06T10:09:46.111+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=non-requeueable deps ti=<TaskInstance: etl_ods.tg_customer.tg_process_customer.process_customer manual__2025-06-06T10:09:16.601242+00:00 map_index=0 [queued]>
[2025-06-06T10:09:46.153+0000] {taskinstance.py:2076} INFO - Dependencies all met for dep_context=requeueable deps ti=<TaskInstance: etl_ods.tg_customer.tg_process_customer.process_customer manual__2025-06-06T10:09:16.601242+00:00 map_index=0 [queued]>
[2025-06-06T10:09:46.155+0000] {taskinstance.py:2306} INFO - Starting attempt 1 of 1
[2025-06-06T10:09:46.200+0000] {taskinstance.py:2330} INFO - Executing <Mapped(_PythonDecoratedOperator): tg_customer.tg_process_customer.process_customer> on 2025-06-06 10:09:16.601242+00:00
[2025-06-06T10:09:46.223+0000] {logging_mixin.py:188} WARNING - /home/airflow/.local/lib/python3.12/site-packages/airflow/task/task_runner/standard_task_runner.py:61 DeprecationWarning: This process (pid=480) is multi-threaded, use of fork() may lead to deadlocks in the child.
[2025-06-06T10:09:46.226+0000] {standard_task_runner.py:63} INFO - Started process 504 to run task
[2025-06-06T10:09:46.225+0000] {standard_task_runner.py:90} INFO - Running: ['airflow', 'tasks', 'run', 'etl_ods', 'tg_customer.tg_process_customer.process_customer', 'manual__2025-06-06T10:09:16.601242+00:00', '--job-id', '54', '--raw', '--subdir', 'DAGS_FOLDER/etl_ods/dag.py', '--cfg-path', '/tmp/tmpm6btjr38', '--map-index', '0']
[2025-06-06T10:09:46.230+0000] {standard_task_runner.py:91} INFO - Job 54: Subtask tg_customer.tg_process_customer.process_customer
[2025-06-06T10:09:46.352+0000] {task_command.py:426} INFO - Running <TaskInstance: etl_ods.tg_customer.tg_process_customer.process_customer manual__2025-06-06T10:09:16.601242+00:00 map_index=0 [running]> on host b168fc67a480
[2025-06-06T10:09:46.636+0000] {taskinstance.py:2648} INFO - Exporting env vars: AIRFLOW_CTX_DAG_OWNER='airflow' AIRFLOW_CTX_DAG_ID='etl_ods' AIRFLOW_CTX_TASK_ID='tg_customer.tg_process_customer.process_customer' AIRFLOW_CTX_EXECUTION_DATE='2025-06-06T10:09:16.601242+00:00' AIRFLOW_CTX_TRY_NUMBER='1' AIRFLOW_CTX_DAG_RUN_ID='manual__2025-06-06T10:09:16.601242+00:00'
[2025-06-06T10:09:46.641+0000] {taskinstance.py:430} INFO - ::endgroup::
[2025-06-06T10:09:46.650+0000] {tasks.py:214} INFO - Loading SQL from file: /opt/airflow/sql/postgres_data_warehouse/ods/customer/ods_process_customer.sql
[2025-06-06T10:09:46.699+0000] {tasks.py:221} INFO - processed query: DO $$
DECLARE
  clean_pattern TEXT := '([[:cntrl:]]|Â| )+';  -- ([[:cntrl:]]|Â| )+ regex pattern to remove unwanted characters
BEGIN

WITH cleaned AS NOT MATERIALIZED (
  SELECT
    id,
    TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g')) AS first_name,
    TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g')) AS last_name,
    INITCAP(TRIM(REGEXP_REPLACE(gender, clean_pattern, '', 'g'))) AS gender,
    LOWER(TRIM(REGEXP_REPLACE(email, clean_pattern, '', 'g'))) AS email,
    TRIM(REGEXP_REPLACE(billing_address, clean_pattern, '', 'g')) AS billing_address,
    TRIM(REGEXP_REPLACE(shipping_address, clean_pattern, '', 'g')) AS shipping_address
  FROM lz.customer
  WHERE id IS NOT NULL
    AND first_name IS NOT NULL
    AND last_name IS NOT NULL
    AND (gender IS NULL 
      OR LOWER(TRIM(REGEXP_REPLACE(gender, clean_pattern, '', 'g')))::VARCHAR(10) IN ('female', 'male'))
    AND email IS NOT NULL
    AND shipping_address IS NOT NULL
    AND TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g'))::VARCHAR(100) <> ''
    AND TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g'))::VARCHAR(100) <> ''
    AND TRIM(REGEXP_REPLACE(email, clean_pattern, '', 'g'))::VARCHAR(255) ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    AND TRIM(REGEXP_REPLACE(shipping_address, clean_pattern, '', 'g')) <> ''
)
INSERT INTO ods.customer (     -- ods.customer
  id, first_name, last_name, gender, email, 
  billing_address, shipping_address
)
SELECT
  id, first_name, last_name, gender, email,
  billing_address, shipping_address
FROM (
  SELECT DISTINCT ON (id)
    id, 
    first_name::VARCHAR(100), 
    last_name::VARCHAR(100), 
    gender::VARCHAR(10), 
    email::VARCHAR(255), 
    billing_address, 
    shipping_address
  FROM cleaned
  ORDER BY id, 
    TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g')), 
    TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g'))
  ) AS final_data;

END $$;, parameters: {'var_text_clean_regex': '([[:cntrl:]]|Â|\xa0)+', 'source_schema': 'lz', 'source_table': 'customer', 'target_schema': 'ods', 'target_table': 'customer'}
[2025-06-06T10:09:46.731+0000] {tasks.py:229} INFO - Split into 1 individual SQL statements
[2025-06-06T10:09:46.732+0000] {tasks.py:233} INFO - Executing:
DO $$
DECLARE
  clean_pattern TEXT := '([[:cntrl:]]|Â| )+';  -- ([[:cntrl:]]|Â| )+ regex pattern to remove unwanted characters
BEGIN

WITH cleaned AS NOT MATERIALIZED (
  SELECT
    id,
    TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g')) AS first_name,
    TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g')) AS last_name,
    INITCAP(TRIM(REGEXP_REPLACE(gender, clean_pattern, '', 'g'))) AS gender,
    LOWER(TRIM(REGEXP_REPLACE(email, clean_pattern, '', 'g'))) AS email,
    TRIM(REGEXP_REPLACE(billing_address, clean_pattern, '', 'g')) AS billing_address,
    TRIM(REGEXP_REPLACE(shipping_address, clean_pattern, '', 'g')) AS shipping_address
  FROM lz.customer
  WHERE id IS NOT NULL
    AND first_name IS NOT NULL
    AND last_name IS NOT NULL
    AND (gender IS NULL 
      OR LOWER(TRIM(REGEXP_REPLACE(gender, clean_pattern, '', 'g')))::VARCHAR(10) IN ('female', 'male'))
    AND email IS NOT NULL
    AND shipping_address IS NOT NULL
    AND TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g'))::VARCHAR(100) <> ''
    AND TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g'))::VARCHAR(100) <> ''
    AND TRIM(REGEXP_REPLACE(email, clean_pattern, '', 'g'))::VARCHAR(255) ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    AND TRIM(REGEXP_REPLACE(shipping_address, clean_pattern, '', 'g')) <> ''
)
INSERT INTO ods.customer (     -- ods.customer
  id, first_name, last_name, gender, email, 
  billing_address, shipping_address
)
SELECT
  id, first_name, last_name, gender, email,
  billing_address, shipping_address
FROM (
  SELECT DISTINCT ON (id)
    id, 
    first_name::VARCHAR(100), 
    last_name::VARCHAR(100), 
    gender::VARCHAR(10), 
    email::VARCHAR(255), 
    billing_address, 
    shipping_address
  FROM cleaned
  ORDER BY id, 
    TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g')), 
    TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g'))
  ) AS final_data;

END $$;
 with parameters: {'var_text_clean_regex': '([[:cntrl:]]|Â|\xa0)+', 'source_schema': 'lz', 'source_table': 'customer', 'target_schema': 'ods', 'target_table': 'customer'}
[2025-06-06T10:09:46.757+0000] {base.py:84} INFO - Using connection ID 'postgres_default' for task execution.
[2025-06-06T10:09:46.769+0000] {sql.py:470} INFO - Running statement: DO $$
DECLARE
  clean_pattern TEXT := '([[:cntrl:]]|Â| )+';  -- ([[:cntrl:]]|Â| )+ regex pattern to remove unwanted characters
BEGIN

WITH cleaned AS NOT MATERIALIZED (
  SELECT
    id,
    TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g')) AS first_name,
    TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g')) AS last_name,
    INITCAP(TRIM(REGEXP_REPLACE(gender, clean_pattern, '', 'g'))) AS gender,
    LOWER(TRIM(REGEXP_REPLACE(email, clean_pattern, '', 'g'))) AS email,
    TRIM(REGEXP_REPLACE(billing_address, clean_pattern, '', 'g')) AS billing_address,
    TRIM(REGEXP_REPLACE(shipping_address, clean_pattern, '', 'g')) AS shipping_address
  FROM lz.customer
  WHERE id IS NOT NULL
    AND first_name IS NOT NULL
    AND last_name IS NOT NULL
    AND (gender IS NULL 
      OR LOWER(TRIM(REGEXP_REPLACE(gender, clean_pattern, '', 'g')))::VARCHAR(10) IN ('female', 'male'))
    AND email IS NOT NULL
    AND shipping_address IS NOT NULL
    AND TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g'))::VARCHAR(100) <> ''
    AND TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g'))::VARCHAR(100) <> ''
    AND TRIM(REGEXP_REPLACE(email, clean_pattern, '', 'g'))::VARCHAR(255) ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'
    AND TRIM(REGEXP_REPLACE(shipping_address, clean_pattern, '', 'g')) <> ''
)
INSERT INTO ods.customer (     -- ods.customer
  id, first_name, last_name, gender, email, 
  billing_address, shipping_address
)
SELECT
  id, first_name, last_name, gender, email,
  billing_address, shipping_address
FROM (
  SELECT DISTINCT ON (id)
    id, 
    first_name::VARCHAR(100), 
    last_name::VARCHAR(100), 
    gender::VARCHAR(10), 
    email::VARCHAR(255), 
    billing_address, 
    shipping_address
  FROM cleaned
  ORDER BY id, 
    TRIM(REGEXP_REPLACE(first_name, clean_pattern, '', 'g')), 
    TRIM(REGEXP_REPLACE(last_name, clean_pattern, '', 'g'))
  ) AS final_data;

END $$;, parameters: None
[2025-06-06T10:09:46.814+0000] {python.py:237} INFO - Done. Returned value was: [None]
[2025-06-06T10:09:46.815+0000] {taskinstance.py:441} INFO - ::group::Post task execution logs
[2025-06-06T10:09:46.883+0000] {taskinstance.py:1206} INFO - Marking task as SUCCESS. dag_id=etl_ods, task_id=tg_customer.tg_process_customer.process_customer, run_id=manual__2025-06-06T10:09:16.601242+00:00, map_index=0, execution_date=20250606T100916, start_date=20250606T100946, end_date=20250606T100946
[2025-06-06T10:09:46.968+0000] {local_task_job_runner.py:240} INFO - Task exited with return code 0
[2025-06-06T10:09:47.079+0000] {taskinstance.py:3498} INFO - 0 downstream tasks scheduled from follow-on schedule check
[2025-06-06T10:09:47.083+0000] {local_task_job_runner.py:222} INFO - ::endgroup::
